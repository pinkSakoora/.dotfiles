#!/bin/bash

DOTPATH=~/.dotfiles
FLAGPATH=~/.dotfiles/flaglist
PKGLIST=~/.dotfiles/pkglist.txt
YAYPKGLIST=~/.dotfiles/foreignpkglist.txt

source $FLAGPATH

cd ~

# 0.5. Display current status according to flags
printf "\nProgress:\n"
cat $FLAGPATH
sleep 3

# 1. Enable multilib
while true; do
    read -p "Has multilib been enabled in this installation? [y/n]" multilibyn
    case $multilibyn in
        [Yy]* ) sed -i 's/MULTILIB="0"/MULTILIB="1"/' $FLAGPATH; $MULTILIB="1";break;;
        [Nn]* ) break;; 
        * ) echo "Input y/n.";;
    esac
done
if [[ $MULTILIB == 0 ]]; then
	printf "\nEnabling multilib in /etc/pacman.conf\n"
	sudo sed -i "/\[multilib\]/,/Include/"'s/^#//' /etc/pacman.conf
	sed -i 's/MULTILIB="0"/MULTILIB="1"/' $FLAGPATH
	printf "\nMultilib enabled.\n"
else
	printf "\nMultilib has already been enabled.\n"
fi
sleep 3

# 2. Install pacman packages
if [[ $PACMAN == 0 ]]; then
	printf "\nInstalling all previously installed packages\n"
	sudo pacman -Sy
	sleep 0.5
	sudo pacman -S --needed - < $PKGLIST
	sed -i 's/PACMAN="0"/PACMAN="1"/' $FLAGPATH
	printf "\nPackages installed.\n"
else
	printf "\nRequired packages have already been installed.\n"
fi
sleep 3

# 3. Setup yay
if [[ $YAYSETUP == 0 ]]; then
	printf "\nSetting up yay\n"
	git clone https://aur.archlinux.org/yay.git
	cd ~/yay
	sleep 0.5
	makepkg -si
	sleep 0.5
	cd ~
	sed -i 's/YAYSETUP="0"/YAYSETUP="1"/' $FLAGPATH
	printf "\nyay set up.\n"
else
	printf "\nyay has been previously set up.\n"
fi
sleep 3

# 4. Install yay packages
if [[ $YAYIN == 0 ]]; then
	printf "\nInstalling AUR packages via yay\n"
	yay -Y --gendb
	sleep 0.5
	yay -Syu --devel
	sleep 0.5
	yay -S - < $YAYPKGLIST
	sed -i 's/YAYIN="0"/YAYIN="1"/' $FLAGPATH
	printf "\nAUR packages installed.\n"
else
	printf "\nAUR packages have already been installed.\n"
fi
sleep 3

# 5. zsh configuration.
if [[ $ZSHDEF == 0 ]]; then
	printf "\nSetting zsh as default shell"
	chsh -s /bin/zsh
	sleep 0.5
	printf "\nInstalling oh-my-zsh"
	sh -c "$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)" "" --unattended
	sleep 0.5
	cat ~/.dotfiles/.zshalias >> ~/.dotfiles/.zshrc
	sed -i 's/ZSHDEF="0"/ZSHDEF="1"/' $FLAGPATH
	printf "\nzsh set up.\n"
else
	printf "\nzsh had already been set up.\n"
fi
sleep 3

# 6. Configs
printf "\nIt is recommended to execute the following in a different tty as the configs will be changed.\n"
if [[ $CONFIG == 0 ]]; then
	SUFFIX="-pre-sakoora"
	printf "\nRenaming preexisting config files\n"
	if [[ -d ~/.config/hypr ]]; then
		mv ~/.config/hypr ~/.config/hypr$SUFFIX
	fi
	if [[ -d ~/.config/dunst ]]; then
		mv ~/.config/dunst ~/.config/dunst$SUFFIX
	fi
	if [[ -d ~/.config/fastfetch ]]; then
		mv ~/.config/fastfetch ~/.config/fastfetch$SUFFIX
	fi
	if [[ -d ~/.config/kitty ]]; then
		mv ~/.config/kitty ~/.config/kitty$SUFFIX
	fi
	if [[ -d ~/.config/waybar ]]; then
		mv ~/.config/waybar ~/.config/waybar$SUFFIX
	fi
	if [[ -f ~/.config/rofi ]]; then
		mv ~/.config/rofi ~/.config/rofi$SUFFIX
	fi
	printf "\nOld config files have been renamed to [config_folder]-pre-sakoora.\n"
	sleep 0.5
	printf "\nMoving config files from .dotfiles to required location"
	mv $DOTPATH/.config ~
	sleep 0.5
	printf "\nMoving wallpapers"
	if [[ -d ~/Pictures ]]; then
		printf "\nPictures directory already exists...\n"
	else
		mkdir ~/Pictures
	fi
	if [[ -d ~/Pictures/Wallpapers/ ]]; then
		printf "\nWallpapers directory already exists...\n"
	else
		mkdir ~/Pictures/Wallpapers
	fi
	mv $DOTPATH/Wallpapers ~/Pictures/Wallpapers
	printf "\nSet a wallpaper using wallset command in terminal. wallset runs\n pywal which is needed for waybar to load. After running wallset, launch waybar \n using bind \$SUPER (set to win key) + W\n"
	sleep 0.5
	printf "\nSetting up app defaults for dolphin"
	sudo update-desktop-database
	sleep 0.5
	if [[ -f /etc/xdg/menus/arch-applications.menu ]]; then
		cd /etc/xdg/menus
		sudo mv arch-applications.menu applications.menu
		cd ~
	fi
	kbuildsycoca6 --noincremental
	sed -i 's/CONFIG="0"/CONFIG="1"/' $FLAGPATH
	printf "\nSystem configured.\n"
else
	printf "\nConfiguration is completed.\n"
fi
printf "\nReached the end of the installation!\n"
